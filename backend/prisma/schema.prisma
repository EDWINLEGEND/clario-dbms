generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// CHANGED: Added enums for all status fields to enforce data integrity
enum MilestoneStatus {
  PENDING
  COMPLETED
}

enum ReminderStatus {
  SCHEDULED
  SENT
  FAILED
}

enum FeeStatus {
  LOCKED
  REFUNDED
  FORFEITED
}

enum VideoHistoryStatus {
  STARTED
  COMPLETED
}

model User {
  id            Int              @id @default(autoincrement())
  name          String?          @db.VarChar(255) // CHANGED: Added string length constraint
  email         String           @unique @db.VarChar(320) // CHANGED: Added string length constraint for email
  learningTypeId Int?
  createdAt     DateTime         @default(now())

  learningType  LearningType?    @relation(fields: [learningTypeId], references: [id], onDelete: SetNull) // CHANGED: Added onDelete rule
  projects      Project[]
  reminders     Reminder[]
  fees          AccountabilityFee[]
  videoHistory  UserVideoHistory[] // CHANGED: Added missing relationship
  coursesAuthored Course[]       @relation("CoursesAuthored")

  @@index([learningTypeId]) // CHANGED: Added index on foreign key
}

model LearningType {
  id        Int         @id @default(autoincrement())
  typeName  String      @db.VarChar(255) // CHANGED: Added string length constraint
  description String?   @db.Text // CHANGED: Added text type for longer descriptions

  users     User[]
  videoTags VideoTag[]
}

model Video {
  id          Int         @id @default(autoincrement())
  title       String      @db.VarChar(255) // CHANGED: Added string length constraint
  description String?     @db.Text // CHANGED: Added text type for longer descriptions
  transcript  String?     @db.Text // CHANGED: Added text type for transcripts
  createdAt   DateTime    @default(now())

  tags        VideoTag[]
  userHistory UserVideoHistory[] // CHANGED: Added missing relationship
  lessons     Lesson[]
}

model VideoTag {
  id            Int          @id @default(autoincrement())
  videoId       Int
  learningTypeId Int
  keyword       String       @db.VarChar(255) // CHANGED: Added string length constraint
  score         Float

  video         Video        @relation(fields: [videoId], references: [id], onDelete: Cascade) // CHANGED: Added cascade delete
  learningType  LearningType @relation(fields: [learningTypeId], references: [id], onDelete: Cascade) // CHANGED: Added cascade delete

  @@index([videoId])
  @@index([learningTypeId])
}

model Project {
  id          Int          @id @default(autoincrement())
  userId      Int
  title       String       @db.VarChar(255) // CHANGED: Added string length constraint
  description String?      @db.Text // CHANGED: Added text type for longer descriptions
  deadline    DateTime?
  createdAt   DateTime     @default(now())

  courseId    String?
  course      Course?      @relation(fields: [courseId], references: [id], onDelete: SetNull)

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade) // CHANGED: Added cascade delete
  milestones  Milestone[]
  fee         AccountabilityFee?

  @@index([userId]) // CHANGED: Added index on foreign key
  @@index([courseId])
}

model Milestone {
  id         Int             @id @default(autoincrement())
  projectId  Int
  title      String          @db.VarChar(255) // CHANGED: Added string length constraint
  dueDate    DateTime?
  status     MilestoneStatus @default(PENDING) // CHANGED: Using enum instead of string

  project    Project         @relation(fields: [projectId], references: [id], onDelete: Cascade) // CHANGED: Added cascade delete
  reminders  Reminder[]

  @@index([projectId]) // CHANGED: Added index on foreign key
  @@index([status]) // CHANGED: Added index on status field for filtering
}

model Reminder {
  id          Int            @id @default(autoincrement())
  userId      Int
  milestoneId Int?
  channel     String         @db.VarChar(100) // CHANGED: Added string length constraint
  sendDate    DateTime
  status      ReminderStatus @default(SCHEDULED) // CHANGED: Using enum instead of string

  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade) // CHANGED: Added cascade delete
  milestone   Milestone?     @relation(fields: [milestoneId], references: [id], onDelete: Cascade) // CHANGED: Added cascade delete

  @@index([userId]) // CHANGED: Added index on foreign key
  @@index([milestoneId]) // CHANGED: Added index on foreign key
  @@index([status]) // CHANGED: Added index on status field for filtering
  @@index([sendDate]) // CHANGED: Added index on sendDate for time-based queries
}

model AccountabilityFee {
  id        Int       @id @default(autoincrement())
  userId    Int
  projectId Int       @unique
  amount    Int
  status    FeeStatus @default(LOCKED) // CHANGED: Using enum instead of string

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade) // CHANGED: Added cascade delete
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade) // CHANGED: Added cascade delete

  @@index([userId]) // CHANGED: Added index on foreign key
  @@index([projectId]) // CHANGED: Added index on foreign key (though it's unique, still useful for queries)
  @@index([status]) // CHANGED: Added index on status field for filtering
}

// CHANGED: Added UserVideoHistory model as referenced in the instructions
model UserVideoHistory {
  id            Int                @id @default(autoincrement())
  userId        Int
  videoId       Int
  percentWatched Float             @default(0) // CHANGED: Added percentWatched field (0-100)
  status        VideoHistoryStatus @default(STARTED)
  watchedAt     DateTime           @default(now())
  completedAt   DateTime?
  updatedAt     DateTime           @updatedAt // CHANGED: Added updatedAt for tracking progress updates

  user          User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  video         Video              @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId], name: "userId_videoId") // CHANGED: Named the unique constraint for upsert
  @@index([userId]) // CHANGED: Added index on foreign key
  @@index([videoId]) // CHANGED: Added index on foreign key
  @@index([status]) // CHANGED: Added index on status field for filtering
}

model Course {
  id            String    @id @default(cuid())
  title         String    @db.VarChar(255)
  description   String?   @db.Text
  thumbnailUrl  String?   @db.VarChar(500)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  instructorId  Int
  instructor    User      @relation("CoursesAuthored", fields: [instructorId], references: [id], onDelete: Cascade)

  lessons       Lesson[]
  tracks        TrackCourse[]
  projects      Project[]

  @@index([instructorId])
}

model Lesson {
  id        String  @id @default(cuid())
  order     Int     // The sequence number of the video in the course (1, 2, 3...)

  courseId  String
  course    Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  videoId   Int
  video     Video   @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([courseId, videoId])
  @@unique([courseId, order])
  @@index([courseId])
  @@index([videoId])
}

model Track {
  id            String    @id @default(cuid())
  title         String    @db.VarChar(255)
  description   String?   @db.Text
  thumbnailUrl  String?   @db.VarChar(500)
  category      String    @db.VarChar(100)
  level         String    @db.VarChar(50)
  totalDuration Int       @default(0) // in minutes
  enrollmentCount Int     @default(0)
  isPublished   Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  courses       TrackCourse[]

  @@index([category])
  @@index([level])
  @@index([isPublished])
}

model TrackCourse {
  order     Int
  trackId   String
  track     Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([trackId, courseId])
  @@index([trackId])
  @@index([courseId])
}