generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int              @id @default(autoincrement())
  name          String?
  email         String           @unique
  learningTypeId Int?
  createdAt     DateTime         @default(now())

  learningType  LearningType?    @relation(fields: [learningTypeId], references: [id])
  projects      Project[]
  reminders     Reminder[]
  fees          AccountabilityFee[]
}

model LearningType {
  id        Int         @id @default(autoincrement())
  typeName  String
  description String?

  users     User[]
  videoTags VideoTag[]
}

model Video {
  id          Int         @id @default(autoincrement())
  title       String
  description String?
  transcript  String?
  createdAt   DateTime    @default(now())

  tags        VideoTag[]
}

model VideoTag {
  id            Int          @id @default(autoincrement())
  videoId       Int
  learningTypeId Int
  keyword       String
  score         Float

  video         Video        @relation(fields: [videoId], references: [id])
  learningType  LearningType @relation(fields: [learningTypeId], references: [id])

  @@index([videoId])
  @@index([learningTypeId])
}

model Project {
  id          Int          @id @default(autoincrement())
  userId      Int
  title       String
  description String?
  deadline    DateTime?
  createdAt   DateTime     @default(now())

  user        User         @relation(fields: [userId], references: [id])
  milestones  Milestone[]
  fee         AccountabilityFee?
}

model Milestone {
  id         Int        @id @default(autoincrement())
  projectId  Int
  title      String
  dueDate    DateTime?
  status     String     @default("pending")

  project    Project    @relation(fields: [projectId], references: [id])
  reminders  Reminder[]
}

model Reminder {
  id          Int        @id @default(autoincrement())
  userId      Int
  milestoneId Int?
  channel     String
  sendDate    DateTime
  status      String     @default("scheduled")

  user        User       @relation(fields: [userId], references: [id])
  milestone   Milestone? @relation(fields: [milestoneId], references: [id])
}

model AccountabilityFee {
  id        Int     @id @default(autoincrement())
  userId    Int
  projectId Int     @unique
  amount    Int
  status    String  @default("locked")

  user      User    @relation(fields: [userId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])
}