generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// CHANGED: Added enums for all status fields to enforce data integrity
enum MilestoneStatus {
  PENDING
  COMPLETED
}

enum ReminderStatus {
  SCHEDULED
  SENT
  FAILED
}

enum FeeStatus {
  LOCKED
  REFUNDED
  FORFEITED
}

enum VideoHistoryStatus {
  STARTED
  COMPLETED
}

model User {
  id            Int              @id @default(autoincrement())
  name          String?          @db.VarChar(255) // CHANGED: Added string length constraint
  email         String           @unique @db.VarChar(320) // CHANGED: Added string length constraint for email
  learningTypeId Int?
  createdAt     DateTime         @default(now())

  learningType  LearningType?    @relation(fields: [learningTypeId], references: [id], onDelete: SetNull) // CHANGED: Added onDelete rule
  projects      Project[]
  reminders     Reminder[]
  fees          AccountabilityFee[]
  videoHistory  UserVideoHistory[] // CHANGED: Added missing relationship

  @@index([learningTypeId]) // CHANGED: Added index on foreign key
}

model LearningType {
  id        Int         @id @default(autoincrement())
  typeName  String      @db.VarChar(255) // CHANGED: Added string length constraint
  description String?   @db.Text // CHANGED: Added text type for longer descriptions

  users     User[]
  videoTags VideoTag[]
}

model Video {
  id          Int         @id @default(autoincrement())
  title       String      @db.VarChar(255) // CHANGED: Added string length constraint
  description String?     @db.Text // CHANGED: Added text type for longer descriptions
  transcript  String?     @db.Text // CHANGED: Added text type for transcripts
  createdAt   DateTime    @default(now())

  tags        VideoTag[]
  userHistory UserVideoHistory[] // CHANGED: Added missing relationship
}

model VideoTag {
  id            Int          @id @default(autoincrement())
  videoId       Int
  learningTypeId Int
  keyword       String       @db.VarChar(255) // CHANGED: Added string length constraint
  score         Float

  video         Video        @relation(fields: [videoId], references: [id], onDelete: Cascade) // CHANGED: Added cascade delete
  learningType  LearningType @relation(fields: [learningTypeId], references: [id], onDelete: Cascade) // CHANGED: Added cascade delete

  @@index([videoId])
  @@index([learningTypeId])
}

model Project {
  id          Int          @id @default(autoincrement())
  userId      Int
  title       String       @db.VarChar(255) // CHANGED: Added string length constraint
  description String?      @db.Text // CHANGED: Added text type for longer descriptions
  deadline    DateTime?
  createdAt   DateTime     @default(now())

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade) // CHANGED: Added cascade delete
  milestones  Milestone[]
  fee         AccountabilityFee?

  @@index([userId]) // CHANGED: Added index on foreign key
}

model Milestone {
  id         Int             @id @default(autoincrement())
  projectId  Int
  title      String          @db.VarChar(255) // CHANGED: Added string length constraint
  dueDate    DateTime?
  status     MilestoneStatus @default(PENDING) // CHANGED: Using enum instead of string

  project    Project         @relation(fields: [projectId], references: [id], onDelete: Cascade) // CHANGED: Added cascade delete
  reminders  Reminder[]

  @@index([projectId]) // CHANGED: Added index on foreign key
  @@index([status]) // CHANGED: Added index on status field for filtering
}

model Reminder {
  id          Int            @id @default(autoincrement())
  userId      Int
  milestoneId Int?
  channel     String         @db.VarChar(100) // CHANGED: Added string length constraint
  sendDate    DateTime
  status      ReminderStatus @default(SCHEDULED) // CHANGED: Using enum instead of string

  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade) // CHANGED: Added cascade delete
  milestone   Milestone?     @relation(fields: [milestoneId], references: [id], onDelete: Cascade) // CHANGED: Added cascade delete

  @@index([userId]) // CHANGED: Added index on foreign key
  @@index([milestoneId]) // CHANGED: Added index on foreign key
  @@index([status]) // CHANGED: Added index on status field for filtering
  @@index([sendDate]) // CHANGED: Added index on sendDate for time-based queries
}

model AccountabilityFee {
  id        Int       @id @default(autoincrement())
  userId    Int
  projectId Int       @unique
  amount    Int
  status    FeeStatus @default(LOCKED) // CHANGED: Using enum instead of string

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade) // CHANGED: Added cascade delete
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade) // CHANGED: Added cascade delete

  @@index([userId]) // CHANGED: Added index on foreign key
  @@index([projectId]) // CHANGED: Added index on foreign key (though it's unique, still useful for queries)
  @@index([status]) // CHANGED: Added index on status field for filtering
}

// CHANGED: Added UserVideoHistory model as referenced in the instructions
model UserVideoHistory {
  id        Int                @id @default(autoincrement())
  userId    Int
  videoId   Int
  status    VideoHistoryStatus @default(STARTED)
  watchedAt DateTime           @default(now())
  completedAt DateTime?

  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  video     Video              @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId]) // CHANGED: Ensure one history record per user per video
  @@index([userId]) // CHANGED: Added index on foreign key
  @@index([videoId]) // CHANGED: Added index on foreign key
  @@index([status]) // CHANGED: Added index on status field for filtering
}